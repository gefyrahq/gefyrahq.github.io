"use strict";(self.webpackChunkgefyra=self.webpackChunkgefyra||[]).push([[9584],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>h});var r=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,i=e.mdxType,a=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=u(n),m=i,h=p["".concat(s,".").concat(m)]||p[m]||d[m]||a;return n?r.createElement(h,l(l({ref:t},c),{},{components:n})):r.createElement(h,l({ref:t},c))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var a=n.length,l=new Array(a);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[p]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<a;u++)l[u]=n[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7446:(e,t,n)=>{n.d(t,{ZP:()=>o});var r=n(7462),i=(n(7294),n(3905));const a={toc:[{value:"Please provide us with your feedback",id:"please-provide-us-with-your-feedback",level:2}]},l="wrapper";function o(e){let{components:t,...n}=e;return(0,i.kt)(l,(0,r.Z)({},a,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"please-provide-us-with-your-feedback"},"Please provide us with your feedback"),(0,i.kt)("p",null,"Did everything work as expected? How was the experience of using Gefyra?\nWe'd appreciate if you could take 2 minutes of your time to fill out our ",(0,i.kt)("a",{parentName:"p",href:"https://forms.gle/AWT9NparpTVk8E978"},"feedback form"),"."))}o.isMDXComponent=!0},6673:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>m,contentTitle:()=>p,default:()=>f,frontMatter:()=>c,metadata:()=>d,toc:()=>h});var r=n(7462),i=n(7294),a=n(3905),l=n(7446),o=n(6010);const s={buttons:"buttons_RIHZ",minimize:"minimize_nnMc",zoom:"zoom_IFGr",menu:"menu_wQBX",screen:"screen_ibqj"};function u(e){let{src:t,alt:n}=e;return i.createElement("section",null,i.createElement("div",{class:s.menu},i.createElement("div",{class:(0,o.Z)(s.buttons,s.close)}),i.createElement("div",{class:(0,o.Z)(s.buttons,s.minimize)}),i.createElement("div",{class:(0,o.Z)(s.buttons,s.zoom)})),i.createElement("div",{class:s.screen},i.createElement("img",{loading:"lazy",alt:n,src:t})))}const c={title:"Getting Started",slug:"getting-started-with-gefyra",sidebar_position:3},p="Getting started with Gefyra and Minikube",d={unversionedId:"gettingstarted",id:"version-2.0.0/gettingstarted",title:"Getting Started",description:"This guide describes the usage of Gefyra for the local development of a Kubernetes",source:"@site/versioned_docs/version-2.0.0/gettingstarted.md",sourceDirName:".",slug:"/getting-started-with-gefyra",permalink:"/docs/getting-started-with-gefyra",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-2.0.0/gettingstarted.md",tags:[],version:"2.0.0",sidebarPosition:3,frontMatter:{title:"Getting Started",slug:"getting-started-with-gefyra",sidebar_position:3},sidebar:"docsSidebar",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Docker Desktop Extension",permalink:"/docs/docker-extension"}},m={},h=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Creating a local Kubernetes cluster with Minikube",id:"creating-a-local-kubernetes-cluster-with-minikube",level:2},{value:"1. Create a local Kubernetes cluster with Minikube by running:",id:"1-create-a-local-kubernetes-cluster-with-minikube-by-running",level:4},{value:"2. Apply some workload, for example from the testing directory from Gefyra:",id:"2-apply-some-workload-for-example-from-the-testing-directory-from-gefyra",level:4},{value:"3. Check the output of the deployed app with:",id:"3-check-the-output-of-the-deployed-app-with",level:4},{value:"Running Gefyra",id:"running-gefyra",level:2},{value:"1. Set up Gefyra with your Minikube cluster:",id:"1-set-up-gefyra-with-your-minikube-cluster",level:4},{value:"2. Run a local Docker container with Gefyra in order to connect it with the cluster.",id:"2-run-a-local-docker-container-with-gefyra-in-order-to-connect-it-with-the-cluster",level:4},{value:"2.1 Build a simple Docker image with a local tag. Save the following two files in a directory on your disk.",id:"21-build-a-simple-docker-image-with-a-local-tag-save-the-following-two-files-in-a-directory-on-your-disk",level:5},{value:"2.2 Build it by running <code>docker build -f Dockerfile . -t pyserver</code> in your directory.",id:"22-build-it-by-running-docker-build--f-dockerfile---t-pyserver-in-your-directory",level:5},{value:"2.3 Execute Gefyra&#39;s run command:",id:"23-execute-gefyras-run-command",level:5},{value:"3. <em>Exec</em> into the running container and look around. You will find the container to run within your Kubernetes cluster.",id:"3-exec-into-the-running-container-and-look-around-you-will-find-the-container-to-run-within-your-kubernetes-cluster",level:4},{value:"4. Create a bridge to redirect the traffic from the cluster application to the one running locally:",id:"4-create-a-bridge-to-redirect-the-traffic-from-the-cluster-application-to-the-one-running-locally",level:4},{value:"5. List all running <em>bridges</em>:",id:"5-list-all-running-bridges",level:4},{value:"6. <em>Unbridge</em> the local container and reset the cluster to its original state:",id:"6-unbridge-the-local-container-and-reset-the-cluster-to-its-original-state",level:4},{value:"Cleaning up",id:"cleaning-up",level:2},{value:"Deleting the Minikube cluster",id:"deleting-the-minikube-cluster",level:2}],k={toc:h},g="wrapper";function f(e){let{components:t,...n}=e;return(0,a.kt)(g,(0,r.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"getting-started-with-gefyra-and-minikube"},"Getting started with Gefyra and Minikube"),(0,a.kt)("p",null,"This guide describes the usage of Gefyra for the local development of a Kubernetes\napplication running in ",(0,a.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/"},"Minikube"),"."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Important:")," This getting started guide for ",(0,a.kt)("a",{parentName:"p",href:"https://minikube.sigs.k8s.io/"},"Minikube")," requires Gefyra in version ",(0,a.kt)("strong",{parentName:"p"},"2.0.0+"),"."),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"Minikube is ",(0,a.kt)("a",{parentName:"li",href:"https://minikube.sigs.k8s.io/docs/start/"},"installed")," (at least in version v1.26.1)"),(0,a.kt)("li",{parentName:"ol"},"Gefyra is ",(0,a.kt)("a",{parentName:"li",href:"https://gefyra.dev/installation"},"available")," (at least in version 2.0.0)")),(0,a.kt)("h2",{id:"creating-a-local-kubernetes-cluster-with-minikube"},"Creating a local Kubernetes cluster with Minikube"),(0,a.kt)(u,{src:"/img/minikube2.gif",alt:"Set up Minikube",mdxType:"Terminal"}),(0,a.kt)("h4",{id:"1-create-a-local-kubernetes-cluster-with-minikube-by-running"},"1. Create a local Kubernetes cluster with Minikube by running:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"minikube start\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Important:")," the following example does not ",(0,a.kt)("em",{parentName:"p"},"fully")," work with ",(0,a.kt)("inlineCode",{parentName:"p"},"--driver=qemu")," since ",(0,a.kt)("inlineCode",{parentName:"p"},"minikube service")," is not currently\nimplemented with the qemu2 driver. See ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/kubernetes/minikube/issues/14146"},"https://github.com/kubernetes/minikube/issues/14146")," for details.",(0,a.kt)("br",{parentName:"p"}),"\n","Tested drivers are: ",(0,a.kt)("em",{parentName:"p"},"docker"),", ",(0,a.kt)("em",{parentName:"p"},"kvm2"),", ",(0,a.kt)("em",{parentName:"p"},"kvm"),", ",(0,a.kt)("em",{parentName:"p"},"virtualbox"),". Others are potentially working, but are not tested."),(0,a.kt)("p",null,"After some time of downloading the required resources, the cluster will be running. You may enable the required\naddons based on your requirements. The ",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl")," context is immediately set to this cluster. You can check if\n",(0,a.kt)("inlineCode",{parentName:"p"},"kubectl config current-context")," is set to ",(0,a.kt)("inlineCode",{parentName:"p"},"minikube"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"kubectl config current-context\n")),(0,a.kt)("h4",{id:"2-apply-some-workload-for-example-from-the-testing-directory-from-gefyra"},"2. Apply some workload, for example from the testing directory from Gefyra:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl apply -f https://raw.githubusercontent.com/gefyrahq/gefyra/main/testing/workloads/hello.yaml\n")),(0,a.kt)("h4",{id:"3-check-the-output-of-the-deployed-app-with"},"3. Check the output of the deployed app with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"kubectl expose deployment hello-nginxdemo --type=NodePort --port=80\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"minikube service hello-nginxdemo\n")),(0,a.kt)("h2",{id:"running-gefyra"},"Running Gefyra"),(0,a.kt)("h4",{id:"1-set-up-gefyra-with-your-minikube-cluster"},"1. Set up Gefyra with your Minikube cluster:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"gefyra up --minikube\n")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Important"),": The ",(0,a.kt)("inlineCode",{parentName:"p"},"--minikube")," switch detects all required connection parameters from your local cluster. The connection won't work\nif this switch is missing when working with Minikube."),(0,a.kt)("h4",{id:"2-run-a-local-docker-container-with-gefyra-in-order-to-connect-it-with-the-cluster"},"2. Run a local Docker container with Gefyra in order to connect it with the cluster."),(0,a.kt)("h5",{id:"21-build-a-simple-docker-image-with-a-local-tag-save-the-following-two-files-in-a-directory-on-your-disk"},"2.1 Build a simple Docker image with a local tag. Save the following two files in a directory on your disk."),(0,a.kt)("p",null,"   File ",(0,a.kt)("inlineCode",{parentName:"p"},"./Dockerfile")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-Dockerfile"},"FROM ubuntu\n# run a server on port 8000\nRUN apt update && apt install -y iproute2 iputils-ping python3 traceroute wget curl\nCOPY local.py local.py\nCMD python3 local.py\n")),(0,a.kt)("p",null,"   File ",(0,a.kt)("inlineCode",{parentName:"p"},"./local.py")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},'import http.server\nimport signal\nimport socket\nimport socketserver\nimport sys\nfrom datetime import datetime\n\nif sys.argv[1:]:\n   port = int(sys.argv[1])\nelse:\n   port = 8000\n\nclass MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):\n   def do_GET(self):\n      self.send_response(200)\n      self.send_header("Content-type", "text/html")\n      self.end_headers()\n      hostname = socket.gethostname()\n      now = datetime.utcnow()\n      self.wfile.write(\n            bytes(\n               f"<html><body><h1>Hello from Gefyra. It is {now} on"\n               f" {hostname}.</h1></body></html>".encode("utf-8")\n            )\n      )\n\nmy_handler = MyHttpRequestHandler\nserver = socketserver.ThreadingTCPServer(("", port), my_handler)\n\ndef signal_handler(signal, frame):\n   try:\n      if server:\n            server.server_close()\n   finally:\n      sys.exit(0)\n\nsignal.signal(signal.SIGINT, signal_handler)\ntry:\n   while True:\n      sys.stdout.flush()\n      server.serve_forever()\nexcept KeyboardInterrupt:\n   pass\n\nserver.server_close()\n')),(0,a.kt)("h5",{id:"22-build-it-by-running-docker-build--f-dockerfile---t-pyserver-in-your-directory"},"2.2 Build it by running ",(0,a.kt)("inlineCode",{parentName:"h5"},"docker build -f Dockerfile . -t pyserver")," in your directory."),(0,a.kt)("h5",{id:"23-execute-gefyras-run-command"},"2.3 Execute Gefyra's run command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"gefyra run -d -i pyserver -N mypyserver -n default\n")),(0,a.kt)("p",null,"   ",(0,a.kt)("strong",{parentName:"p"},"Important"),": ",(0,a.kt)("inlineCode",{parentName:"p"},"gefyra run")," is just a wrapper for ",(0,a.kt)("inlineCode",{parentName:"p"},"docker run")," (with additional flags), yet it also applies Gefyra's networking\nconfiguration to connect the container with Kubernetes. Check out ",(0,a.kt)("a",{parentName:"p",href:"/docs/cli#run"},"the docs for ",(0,a.kt)("inlineCode",{parentName:"a"},"gefyra run"))),(0,a.kt)("h4",{id:"3-exec-into-the-running-container-and-look-around-you-will-find-the-container-to-run-within-your-kubernetes-cluster"},"3. ",(0,a.kt)("em",{parentName:"h4"},"Exec")," into the running container and look around. You will find the container to run within your Kubernetes cluster."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"docker exec -it mypyserver bash\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"wget -O- hello-nginx\n")),(0,a.kt)("p",null,"will print out the website of the cluster service ",(0,a.kt)("em",{parentName:"p"},"hello-nginx")," from within the cluster. \ud83d\ude80"),(0,a.kt)("h4",{id:"4-create-a-bridge-to-redirect-the-traffic-from-the-cluster-application-to-the-one-running-locally"},"4. Create a bridge to redirect the traffic from the cluster application to the one running locally:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"gefyra bridge -N mypyserver -n default --ports 80:8000 --target deploy/hello-nginxdemo/hello-nginx\n")),(0,a.kt)("p",null,"Check out the locally running server serving the cluster by refreshing the address from:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"minikube service hello-nginxdemo\n")),(0,a.kt)("p",null,"It shows you a different message: ",(0,a.kt)("inlineCode",{parentName:"p"},"Hello from Gefyra. It is ..."),". Yes, that is really coming from your local container! \ud83d\ude0e"),(0,a.kt)("h4",{id:"5-list-all-running-bridges"},"5. List all running ",(0,a.kt)("em",{parentName:"h4"},"bridges"),":"),(0,a.kt)("p",null,"You can list all currently active bridges with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"gefyra list --bridges\n")),(0,a.kt)("p",null,"You will find all local containers that are currently linked into the cluster serving requests. "),(0,a.kt)("h4",{id:"6-unbridge-the-local-container-and-reset-the-cluster-to-its-original-state"},"6. ",(0,a.kt)("em",{parentName:"h4"},"Unbridge")," the local container and reset the cluster to its original state:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"gefyra unbridge --all\n")),(0,a.kt)("p",null,"Check out the original response from: "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"minikube service hello-nginxdemo\n")),(0,a.kt)("p",null,"The cluster is now reset to its inital state again."),(0,a.kt)("h2",{id:"cleaning-up"},"Cleaning up"),(0,a.kt)("p",null,"Remove Gefyra's components from the cluster and your local Docker host with:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"gefyra down\n")),(0,a.kt)("h2",{id:"deleting-the-minikube-cluster"},"Deleting the Minikube cluster"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"minikube delete\n")),(0,a.kt)(l.ZP,{mdxType:"Feedback"}))}f.isMDXComponent=!0}}]);