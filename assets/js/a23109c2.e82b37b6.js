"use strict";(self.webpackChunkgefyra=self.webpackChunkgefyra||[]).push([[7373],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(r),u=a,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},333:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"Architecture",sidebar_position:2},i="How does it work?",s={unversionedId:"technical-details/architecture",id:"version-2.0.0/technical-details/architecture",title:"Architecture",description:"In order to write software for and with Kubernetes, obviously a Kubernetes cluster is required. There are already a number of Kubernetes",source:"@site/versioned_docs/version-2.0.0/technical-details/architecture.md",sourceDirName:"technical-details",slug:"/technical-details/architecture",permalink:"/docs/technical-details/architecture",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/versioned_docs/version-2.0.0/technical-details/architecture.md",tags:[],version:"2.0.0",sidebarPosition:2,frontMatter:{title:"Architecture",sidebar_position:2},sidebar:"docsSidebar",previous:{title:"Technical Details",permalink:"/docs/technical-details/"},next:{title:"What is Gefyra?",permalink:"/docs/technical-details/what"}},l={},c=[{value:"Docker",id:"docker",level:2},{value:"Wireguard",id:"wireguard",level:2},{value:"CoreDNS",id:"coredns",level:2},{value:"Nginx",id:"nginx",level:2},{value:"Local development setup",id:"local-development-setup",level:2},{value:"The <em>bridge</em> operation in action",id:"the-bridge-operation-in-action",level:2},{value:"Before the bridge operation",id:"before-the-bridge-operation",level:3},{value:"Preparing the bridge operation",id:"preparing-the-bridge-operation",level:3},{value:"During the bridge operation",id:"during-the-bridge-operation",level:3}],p={toc:c},d="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(d,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"how-does-it-work"},"How does it work?"),(0,a.kt)("p",null,"In order to write software for and with Kubernetes, obviously a Kubernetes cluster is required. There are already a number of Kubernetes\ndistributions available to run everything locally. A cloud-based Kubernetes cluster can be connected as well in order to spare the development\ncomputer from blasting off.\nA working ",(0,a.kt)("em",{parentName:"p"},"KUBECONFIG")," connection is required with appropriate permissions which should always be the case for local clusters. Gefyra installs the required\ncluster-side components by itself once a development setup is about to be established."),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://github.com/gefyrahq/gefyra/raw/main/docs/static/img/gefyra-overview.png",alt:"Gefyra connects to a Kubernetes cluster"})),(0,a.kt)("p",null,"With these components, Gefyra is able to control a local development machine, and the development cluster, too. Both sides are now in the hand of\nGefyra.",(0,a.kt)("br",{parentName:"p"}),"\n","Once the developer's work is done, Gefyra well and truly removes all components from the cluster without leaving a trace.  "),(0,a.kt)("p",null,"A few things are required in order to achieve this:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"a ",(0,a.kt)("em",{parentName:"li"},"tunnel")," between the local development machine and the Kubernetes cluster"),(0,a.kt)("li",{parentName:"ul"},"a local end of that tunnel to steer the traffic, DNS, and encrypt everything passing over the line"),(0,a.kt)("li",{parentName:"ul"},"a cluster end of the tunnel, forwarding traffic, taking care of the encryption"),(0,a.kt)("li",{parentName:"ul"},"a local DNS resolver that behaves like the cluster DNS"),(0,a.kt)("li",{parentName:"ul"},"sophisticated IP routing mechanisms"),(0,a.kt)("li",{parentName:"ul"},"a traffic interceptor for containers already running withing the Kubernetes cluster")),(0,a.kt)("p",null,"Gefyra builds on top of the following popular open-source technologies:"),(0,a.kt)("h2",{id:"docker"},"Docker"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://docker.io"},(0,a.kt)("em",{parentName:"a"},"Docker"))," is currently used in order to manage the local container-based development setup, including the\nhost, networking and container management procedures."),(0,a.kt)("h2",{id:"wireguard"},"Wireguard"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://wireguard.com"},(0,a.kt)("em",{parentName:"a"},"Wireguard"))," is used to establish the connection tunnel between the two ends. It securely encrypts the UDP-based traffic\nand allows to create a ",(0,a.kt)("em",{parentName:"p"},"site-to-site")," network for Gefyra. That way, the development setup becomes part of the cluster and containers running locally\nare actually able to reach cluster-based resources, such as databases, other (micro)services and so on."),(0,a.kt)("h2",{id:"coredns"},"CoreDNS"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://coredns.io"},(0,a.kt)("em",{parentName:"a"},"CoreDNS"))," provides local DNS functionality. It allows resolving resources running within the Kubernetes cluster."),(0,a.kt)("h2",{id:"nginx"},"Nginx"),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://www.nginx.com/"},(0,a.kt)("em",{parentName:"a"},"Nginx"))," is used for all kinds of proxying and reverse-proxying traffic, including the interceptions of already running containers\nin the cluster."),(0,a.kt)("h1",{id:"architecture-of-the-entire-development-system"},"Architecture of the entire development system"),(0,a.kt)("h2",{id:"local-development-setup"},"Local development setup"),(0,a.kt)("p",null,"The local development happens with a running container instance of the application in question on the developer machine.\nGefyra takes care of the local Docker host setup, and hence needs access to it. It creates a dedicated Docker network\nwhich the container is deployed to. Next to the developed application, Gefyra places a ",(0,a.kt)("em",{parentName:"p"},"sidecar")," container. This container,\nas a component of Gefyra, is called ",(0,a.kt)("em",{parentName:"p"},"Cargo"),".",(0,a.kt)("br",{parentName:"p"}),"\n","Cargo acts as a network gateway for the app container and, as such, takes care of the IP routing into and from the cluster.\nIn addition, Cargo provides a CoreDNS server which forwards all requests to the cluster. That way, the app container will be\nable to resolve cluster resources and may not resolve domain names that are not supposed to be resolved (think of\nisolated application scenarios).\nCargo encrypts all the passing traffic with ",(0,a.kt)("em",{parentName:"p"},"Wireguard")," using ad-hoc connection secrets. "),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://github.com/gefyrahq/gefyra/raw/main/docs/static/img/gefyra-development.png",alt:"Gefyra local development"})),(0,a.kt)("p",null,"This local setup allows developers to use their existing tooling, including their favorite code editor and debuggers. The\napplication, when it is supported, can perform code-hot-reloading upon changes and pipe logging output to a local shell\n(or other systems).",(0,a.kt)("br",{parentName:"p"}),"\n","Of course, developers are able to mount local storage volumes into the container, override environment variables and modify\neverything as they'd like to.",(0,a.kt)("br",{parentName:"p"}),"\n","Replacing a container in the cluster with a local instance is called ",(0,a.kt)("em",{parentName:"p"},"bridge"),": from an architectural perspective the local\napplication is ",(0,a.kt)("em",{parentName:"p"},"bridged")," into the cluster.\nIf the container is already running within a Kubernetes Pod, it gets replaced and all traffic to the originally running\ncontainer is proxied to the one on the developer machine.",(0,a.kt)("br",{parentName:"p"}),"\n","During the container startup of the application, Gefyra modifies the container's networking from the outside and sets the\n",(0,a.kt)("em",{parentName:"p"},"default gateway")," to Cargo. That way, all container's traffic is passed to the cluster via Cargo's encrypted tunnel. The\nsame procedure can be applied for multiple app containers at the same time.  "),(0,a.kt)("p",null,"The neat part is that with a debugger and two or more ",(0,a.kt)("em",{parentName:"p"},"bridged")," containers, developers can introspect requests from the source\nto the target and back around while being attached to both ends."),(0,a.kt)("h2",{id:"the-bridge-operation-in-action"},"The ",(0,a.kt)("em",{parentName:"h2"},"bridge")," operation in action"),(0,a.kt)("p",null,"This chapter covers the important ",(0,a.kt)("em",{parentName:"p"},"bridge")," operation by following an example."),(0,a.kt)("h3",{id:"before-the-bridge-operation"},"Before the bridge operation"),(0,a.kt)("p",null,"Think of a provisioned Kubernetes cluster running some workload. There is an Ingress, Kubernetes Services and Pods running\ncontainers. Some of them use the ",(0,a.kt)("em",{parentName:"p"},"sidecar")," (",(0,a.kt)("a",{parentName:"p",href:"https://medium.com/nerd-for-tech/microservice-design-pattern-sidecar-sidekick-pattern-dbcea9bed783"},"https://medium.com/nerd-for-tech/microservice-design-pattern-sidecar-sidekick-pattern-dbcea9bed783"),") pattern."),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://github.com/gefyrahq/gefyra/raw/main/docs/static/img/gefyra-process-step-1.png",alt:"Gefyra development workflow_step1"})),(0,a.kt)("h3",{id:"preparing-the-bridge-operation"},"Preparing the bridge operation"),(0,a.kt)("p",null,"Before the ",(0,a.kt)("em",{parentName:"p"},"brigde")," can happen, Gefyra installs all required components to the cluster. A valid and privileged connection\nmust be available on the developer machine to do so.",(0,a.kt)("br",{parentName:"p"}),"\n","The main component is the cluster agent called ",(0,a.kt)("em",{parentName:"p"},"Stowaway"),". The Stowaway controls the cluster side of the tunnel connection.\nIt is operated by ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/gefyrahq/gefyra/tree/main/operator"},"Gefyra's Operator application"),"."),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://github.com/gefyrahq/gefyra/raw/main/docs/static/img/gefyra-process-step-2.png",alt:"Gefyra development workflow step 2"})),(0,a.kt)("p",null,"Stowaway boots up and dynamically creates Wireguard connection secrets (private/public key-pair) for itself and Cargo.\nGefyra copies these secrets to Cargo for it to establish a connection. This is a UDP connection. It requires a Kubernetes\nService of kind ",(0,a.kt)("em",{parentName:"p"},"nodeport")," to allow the traffic to pass through ",(0,a.kt)("em",{parentName:"p"},"for the time of an active development session"),". Gefyra's\noperator installs these components with the requested parameters and removes it after the session terminates.",(0,a.kt)("br",{parentName:"p"}),"\n","By the way: Gefyra's operator removes all components and itself from the cluster in case the connection was disrupted\nfor some time, too.",(0,a.kt)("br",{parentName:"p"}),"\n","Once a connection could be establised from Cargo to Stowaway (after running ",(0,a.kt)("inlineCode",{parentName:"p"},"gefyra up"),"), Gefyra can spin up the app container on the local side for the\ndeveloper to start working (by running ",(0,a.kt)("inlineCode",{parentName:"p"},"gefyra run ..."),").",(0,a.kt)("br",{parentName:"p"}),"\n","Another job of Gefyra's operator is to rewrite the target pods, i.e. exchange the running container through Gefyras proxy,\ncalled ",(0,a.kt)("em",{parentName:"p"},"Carrier")," (upon running ",(0,a.kt)("inlineCode",{parentName:"p"},"gefyra bridge ..."),").",(0,a.kt)("br",{parentName:"p"}),"\n","For that, it creates a temporary Kubernetes Service that channels the Ingress traffic (or any other kind of cluster internal\ntraffic) to the container through Stowaway and Cargo to the locally running app container. "),(0,a.kt)("h3",{id:"during-the-bridge-operation"},"During the bridge operation"),(0,a.kt)("p",null,"A bridge can robustly run as long as it is required to (given the connection does not drop in the meanwhile).\nLooking at the example, Carrier was installed in pod ","<","C",">"," on port ",(0,a.kt)("em",{parentName:"p"},"XY"),". That port was previously occupied by the container\nrunning there originally. In most cases, the local app container represents the development version of that originally\nprovisioned container. Traffic coming from the Ingress, passing on to the Service ","<","C",">"," hits Carrier (the proxy). Carrier\nbends the request to flow through Gefyras Service to the local app container via Stowaway and Cargo's tunnel. This works\nsince the app container's IP is routable from within the cluster.",(0,a.kt)("br",{parentName:"p"}),"\n","The local app container does not simply return a response, but fires up another subsequent request by itself to\nService ","<","A",">",". The request roams from the local app container back into the cluster and hits Pod ","<","A",">","'s container via\nService ","<","A",">",". The response is awaited.",(0,a.kt)("br",{parentName:"p"}),"\n","Once the local app container is done with constructing its initial answer the response gets back to Carrier and afterwards\nto the Ingress and back to the client."),(0,a.kt)("p",{align:"center"},(0,a.kt)("img",{src:"https://github.com/gefyrahq/gefyra/raw/main/docs/static/img/gefyra-process-step-3.png",alt:"Gefyra development workflow step 3"})),(0,a.kt)("p",null,"With that, the local development container is reachable exactly the same way another container from within the cluster\nwould be. That fact is a major advantage, especially for frontend applications or domain-sensitive services.",(0,a.kt)("br",{parentName:"p"}),"\n","Developers now can run local integration tests with new software while having access to all interdependent services.",(0,a.kt)("br",{parentName:"p"}),"\n","Once the development job is done, Gefyra properly removes everything, resets Pod ","<","C",">"," to its original configuration,\nand tears the local environment down (just like nothing ever happened)."))}h.isMDXComponent=!0}}]);