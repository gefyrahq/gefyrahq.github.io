"use strict";(self.webpackChunkgefyra=self.webpackChunkgefyra||[]).push([[7636],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},s="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},g=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),s=c(n),g=a,h=s["".concat(p,".").concat(g)]||s[g]||d[g]||o;return n?r.createElement(h,i(i({ref:t},u),{},{components:n})):r.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l[s]="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1045:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={title:"Developing Go Applications with Gefyra"},i="Developing Go Applications with Gefyra",l={unversionedId:"golang",id:"golang",title:"Developing Go Applications with Gefyra",description:"Simple Usecase",source:"@site/usecases/golang.md",sourceDirName:".",slug:"/golang",permalink:"/usecases-and-demos/golang",draft:!1,tags:[],version:"current",frontMatter:{title:"Developing Go Applications with Gefyra"},sidebar:"docsSidebar",previous:{title:"Use Cases and Demos",permalink:"/usecases-and-demos/"},next:{title:"OAuth2 Demo with a Sidecar",permalink:"/usecases-and-demos/oauth2-demo"}},p={},c=[{value:"What you will learn",id:"what-you-will-learn",level:3},{value:"What you will need",id:"what-you-will-need",level:3},{value:"Creating the Development Infrastructure",id:"creating-the-development-infrastructure",level:3},{value:"The Demo Application",id:"the-demo-application",level:3},{value:"Enter Gefyra",id:"enter-gefyra",level:3}],u={toc:c},s="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(s,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"developing-go-applications-with-gefyra"},"Developing Go Applications with Gefyra"),(0,a.kt)("p",null,"Simple Usecase"),(0,a.kt)("p",null,"This example demonstrates how to run a local Golang container with hot code reloading as part of your Kubernetes namespace. "),(0,a.kt)("hr",null),(0,a.kt)("h3",{id:"what-you-will-learn"},"What you will learn"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Running a Go application in a local container with hot code reloading"),(0,a.kt)("li",{parentName:"ul"},"Using Gefyra to bridge the container into a Kubernetes cluster")),(0,a.kt)("h3",{id:"what-you-will-need"},"What you will need"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/docs/installation"},"Gefyra")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://github.com/Getdeck/getdeck"},"Getdeck")," for setting up the development infrastructure (runs on ",(0,a.kt)("inlineCode",{parentName:"li"},"k3d"),")"),(0,a.kt)("li",{parentName:"ul"},"A copy of ",(0,a.kt)("a",{parentName:"li",href:"https://github.com/gefyrahq/gefyra-demos"},"https://github.com/gefyrahq/gefyra-demos")),(0,a.kt)("li",{parentName:"ul"},"Optionally: ",(0,a.kt)("a",{parentName:"li",href:"https://k3d.io"},"k3d")," or any other preferred Kubernetes cluster")),(0,a.kt)("h3",{id:"creating-the-development-infrastructure"},"Creating the Development Infrastructure"),(0,a.kt)("p",null,"After cloning the gefyra-demos repository, you can start a local k3d based Kubernetes cluster with the Go demo workload by running"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"cd golang-demo\ndeck get deck.yaml\n")),(0,a.kt)("p",null,"Once everything is up and running, you can visit ",(0,a.kt)("a",{parentName:"p",href:"http://gefyra-golang.127.0.0.1.nip.io:8080"},"http://gefyra-golang.127.0.0.1.nip.io:8080")," to verify that everything worked as expected."),(0,a.kt)("h3",{id:"the-demo-application"},"The Demo Application"),(0,a.kt)("p",null,"You can look at and tweak the code for the demo application in ",(0,a.kt)("inlineCode",{parentName:"p"},"app/main.go"),". You will find a very simple HTTP API that returns a String when it receives GET requests at the base route.\nIn the ",(0,a.kt)("inlineCode",{parentName:"p"},"app"),"-directory, you'll also find the Dockerfile that is used to build the container image containing our application.\n",(0,a.kt)("strong",{parentName:"p"},"Note"),": In the Dockerfile, we install ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/cosmtrek/air"},"air"),", a hot reloading utillity for Go development. In a production Dockerfile, you'd want to specify a dedicated\nbuild target to install air."),(0,a.kt)("h3",{id:"enter-gefyra"},"Enter Gefyra"),(0,a.kt)("p",null,"In order to connect a locally running container to a Kubernetes cluster, we use Gefyra.\nFirst of all, we need to build an image on our development machine like so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"cd app\ndocker build . -t gefyra-golang-example\n")),(0,a.kt)("p",null,"Once the build is finished, we are ready to get started with Gefyra:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell",metastring:"script",script:!0},"gefyra up\ngefyra run -i gefyra-golang-example -N gefyra-golang-example -n golang-demo -c air -v $(pwd):/app\ngefyra bridge -N gefyra-golang-example --container-name gefyra-golang-demo --deployment gefyra-golang-demo --port 3333:3333 -n golang-example\n")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"gefyra up")," will start the cluster and client side components needed for Gefyra to do it's thing.\nThe ",(0,a.kt)("inlineCode",{parentName:"p"},"gefyra run")," command will then start a container from the image that we just build in the development infrastructure that we created before.\nFinally, 'gefyra bridge' will overlay our local container over the one that we specified in the run command."),(0,a.kt)("p",null,"Once Gefyra tells you that the bridge is established, you're ready to make some changes and check out hot code reloading in Kubernetes in action.\nVisit ",(0,a.kt)("a",{parentName:"p",href:"http://gefyra-golang.127.0.0.1.nip.io:8080"},"http://gefyra-golang.127.0.0.1.nip.io:8080")," in your browser and try changing the contents of the\n",(0,a.kt)("inlineCode",{parentName:"p"},"io.WriteString")," function. Since we mounted our code into the container during ",(0,a.kt)("inlineCode",{parentName:"p"},"gefyra run"),", air will detect the changes and rebuild/restart our application.\nRefresh your browser and check out the results!"))}d.isMDXComponent=!0}}]);