"use strict";(self.webpackChunkgefyra=self.webpackChunkgefyra||[]).push([[445],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},h="mdxType",c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),h=p(n),m=o,d=h["".concat(s,".").concat(m)]||h[m]||c[m]||r;return n?a.createElement(d,i(i({ref:t},u),{},{components:n})):a.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[h]="string"==typeof e?e:o,i[1]=l;for(var p=2;p<r;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},4345:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>p});var a=n(7462),o=(n(7294),n(3905));const r={layout:"page",title:"OAuth2 Demo with a Sidecar",permalink:"/usecases/oauth2-demo/",nav_order:2,parent:"Use Cases and Demos"},i="Create a Backend Application with a Sidecar and OAuth2 Authentication",l={unversionedId:"usecases/oauth2-demo",id:"usecases/oauth2-demo",title:"OAuth2 Demo with a Sidecar",description:"Advanced Usecase",source:"@site/docs/usecases/oauth2-demo.md",sourceDirName:"usecases",slug:"/usecases/oauth2-demo",permalink:"/docs/usecases/oauth2-demo",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/usecases/oauth2-demo.md",tags:[],version:"current",frontMatter:{layout:"page",title:"OAuth2 Demo with a Sidecar",permalink:"/usecases/oauth2-demo/",nav_order:2,parent:"Use Cases and Demos"},sidebar:"docsSidebar",previous:{title:"Run a Ubuntu container instance",permalink:"/docs/usecases/ubuntu-in-namespace"},next:{title:"Remote Development on Google Kubernetes Engine",permalink:"/docs/usecases/remote-gke"}},s={},p=[{value:"What you will learn",id:"what-you-will-learn",level:3},{value:"What you will need",id:"what-you-will-need",level:3},{value:"Table of contents",id:"table-of-contents",level:3},{value:"Creating the Development Infrastructure",id:"creating-the-development-infrastructure",level:2},{value:"Getting the App Running",id:"getting-the-app-running",level:2},{value:"The Scheme of the Infrastructure",id:"the-scheme-of-the-infrastructure",level:2},{value:"Kubernetes Overview",id:"kubernetes-overview",level:3},{value:"The OAuth2-Demo Sidecar Workload",id:"the-oauth2-demo-sidecar-workload",level:3},{value:"The OpenID Connect Flow in Brief",id:"the-openid-connect-flow-in-brief",level:3},{value:"The Example Bug",id:"the-example-bug",level:2},{value:"Gefyra to the Rescue",id:"gefyra-to-the-rescue",level:2},{value:"Running a Development Instance of the Container",id:"running-a-development-instance-of-the-container",level:3},{value:"Attaching a Debugger to the Development Instance",id:"attaching-a-debugger-to-the-development-instance",level:3},{value:"Bridging the Development Instance in the Cluster",id:"bridging-the-development-instance-in-the-cluster",level:3},{value:"Debugging the Application",id:"debugging-the-application",level:3},{value:"Fixing the Bug",id:"fixing-the-bug",level:3},{value:"Shutting Down Gefyra",id:"shutting-down-gefyra",level:3}],u={toc:p},h="wrapper";function c(e){let{components:t,...n}=e;return(0,o.kt)(h,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"create-a-backend-application-with-a-sidecar-and-oauth2-authentication"},"Create a Backend Application with a Sidecar and OAuth2 Authentication"),(0,o.kt)("p",null,"Advanced Usecase"),(0,o.kt)("p",null,"This example demonstrates how to develop a Kubernetes sidecar pattern for an OAuth2 (OpenID Connect) authorized\nbackend service using Gefyra. "),(0,o.kt)("p",null,"This is more of an advanced use-case, if you just want an easy example of how Gefyra works, check\nout the ",(0,o.kt)("a",{parentName:"p",href:"https://gefyra.dev/getting-started/"},"getting started guide"),"."),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"what-you-will-learn"},"What you will learn"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a (Python-based) backend application that reads a JWT (JSON web token)"),(0,o.kt)("li",{parentName:"ul"},"Get a local identity provider with ",(0,o.kt)("a",{parentName:"li",href:"https://www.keycloak.org/"},"Keycloak")," "),(0,o.kt)("li",{parentName:"ul"},"Apply the Kubernetes sidecar pattern with ",(0,o.kt)("a",{parentName:"li",href:"https://oauth2-proxy.github.io/oauth2-proxy/"},"OAuth2-Proxy")," and connect the app to Keycloak"),(0,o.kt)("li",{parentName:"ul"},"Find and fix a bug"),(0,o.kt)("li",{parentName:"ul"},"Start coding locally within the Kubernetes cluster having the sidecar active")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"what-you-will-need"},"What you will need"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/installation"},"Gefyra")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/Getdeck/getdeck"},"Getdeck")," for setting up the development infrastructure (runs on ",(0,o.kt)("inlineCode",{parentName:"li"},"k3d"),")"),(0,o.kt)("li",{parentName:"ul"},"kubectl"),(0,o.kt)("li",{parentName:"ul"},"A copy of ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/gefyrahq/gefyra-demos"},"https://github.com/gefyrahq/gefyra-demos")),(0,o.kt)("li",{parentName:"ul"},"Optionally: ",(0,o.kt)("a",{parentName:"li",href:"https://k3d.io"},"k3d")," or any other preferred Kubernetes cluster"),(0,o.kt)("li",{parentName:"ul"},"Optionally: VSCode with Python debugger installed (or any other preferred IDE)")),(0,o.kt)("hr",null),(0,o.kt)("h3",{id:"table-of-contents"},"Table of contents"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"TOC")),(0,o.kt)("p",null,"That's about it. Let's get started."),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"creating-the-development-infrastructure"},"Creating the Development Infrastructure"),(0,o.kt)("p",null,"First, we need a Kubernetes-based development infrastructure which contains all required components. Luckily this can\nbe achieved quite easily with the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Getdeck/getdeck"},(0,o.kt)("inlineCode",{parentName:"a"},"Deck CLI")," from here"),"."),(0,o.kt)("p",null,"Just run: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"deck get --name oauth2-demo https://github.com/gefyrahq/gefyra-demos.git\n")),(0,o.kt)("p",null,"and you will get a fresh ",(0,o.kt)("inlineCode",{parentName:"p"},"k3d")," cluster running locally with all required components installed. "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Important:")," These workloads are intended for demonstration purposes and are not safe for production deployments."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Optional:")," If you don't want to create the development infrastructure using ",(0,o.kt)("inlineCode",{parentName:"p"},"Getdeck")," you can also provide it\nyourself. You need:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"a Kubernetes cluster"),(0,o.kt)("li",{parentName:"ul"},"an identity provider (preferably Keycloak)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"a custom realm with an oauth2 client for the backend service"),(0,o.kt)("li",{parentName:"ul"},"a test user with required privileges"),(0,o.kt)("li",{parentName:"ul"},"ingress config that supports a full-fledged oauth2 login flow"))),(0,o.kt)("li",{parentName:"ul"},"the workload manifests for the backend application with the OAuth2-Proxy sidecar")),(0,o.kt)("h2",{id:"getting-the-app-running"},"Getting the App Running"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Optional:")," In order to observe the workload booting up, check out\n",(0,o.kt)("a",{parentName:"p",href:"http://dashboard.127.0.0.1.nip.io:8080/#/workloads?namespace=oauth2-demo"},"the Kubernetes dashboard")," coming with this ",(0,o.kt)("inlineCode",{parentName:"p"},"deck"),".",(0,o.kt)("br",{parentName:"p"}),"\n","A healthy cluster looks like this:  "),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"/img/usecases_oauth2-demo_dashboard1.png",alt:"the kubernetes dashboard"})),(0,o.kt)("p",null,"Once you have the workload running in Kubernetes, head over to\n",(0,o.kt)("a",{parentName:"p",href:"http://oauth2-demo.127.0.0.1.nip.io:8080/"},"http://oauth2-demo.127.0.0.1.nip.io:8080/"),".  "),(0,o.kt)("p",null,"The following page should come up asking you to sign in with ",(0,o.kt)("em",{parentName:"p"},"OpenID Connect"),":  "),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"/img/usecases_oauth2-demo_oauth2-proxy.png",alt:"the oauth2-proxy login portal"})),(0,o.kt)("p",null,"Once you click the button you will be redirected to the central login of Keycloak, which looks like this:  "),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"/img/usecases_oauth2-demo_kc-login.png",alt:"Keycloak login page"})),(0,o.kt)("p",null,"Please notice how you got redirected to the local domain of Keycloak (",(0,o.kt)("a",{parentName:"p",href:"http://keycloak.127.0.0.1.nip.io:8080/..."},"http://keycloak.127.0.0.1.nip.io:8080/..."),").  "),(0,o.kt)("p",null,"The demo workload contains a prepared user in Keycloak's database. You can use it to perform a login. The credentials are as\nfollows:  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Username"),": ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"mailto:john@gefyra.dev"},"john@gefyra.dev")),(0,o.kt)("br",{parentName:"p"}),"\n",(0,o.kt)("strong",{parentName:"p"},"Password"),": ",(0,o.kt)("em",{parentName:"p"},(0,o.kt)("a",{parentName:"em",href:"mailto:john@gefyra.dev"},"john@gefyra.dev")),"  "),(0,o.kt)("p",null,"Once you hit the ",(0,o.kt)("em",{parentName:"p"},"Sign In")," button you will be redirected back to the beginning, but this time you will see the json output of\nthe backend service:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"Hello":"World"}\n')),(0,o.kt)("p",null,"Voil\xe0, we have a full-fledged ",(0,o.kt)("a",{parentName:"p",href:"https://openid.net/connect/"},"OpenID Connect")," login flow running in a Kubernetes cluster.",(0,o.kt)("br",{parentName:"p"}),"\n","So are we done yet? Not quite. Let's move on to the internals."),(0,o.kt)("h2",{id:"the-scheme-of-the-infrastructure"},"The Scheme of the Infrastructure"),(0,o.kt)("h3",{id:"kubernetes-overview"},"Kubernetes Overview"),(0,o.kt)("p",null,"The Kubernetes cluster is running three important components for this use case:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Keycloak: the identity provider compatible with OpenID Connect (OIDC)"),(0,o.kt)("li",{parentName:"ul"},"OAuth2-Proxy: a reverse proxy compatible with OpenID Connect "),(0,o.kt)("li",{parentName:"ul"},"Backend Application: a ",(0,o.kt)("a",{parentName:"li",href:"https://fastapi.tiangolo.com/"},"FastAPI")," application")),(0,o.kt)("p",null,"The OAuth2-Proxy is implemented as a sidecar and runs side-by-side in each ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/workloads/pods/"},(0,o.kt)("em",{parentName:"a"},"Pod"))," with the backend application. If you are\nnot yet familiar with the sidecar pattern ",(0,o.kt)("a",{parentName:"p",href:"https://www.oreilly.com/library/view/designing-distributed-systems/9781491983638/ch02.html"},"please check out this resource"),".\nKeycloak runs in a ",(0,o.kt)("em",{parentName:"p"},"StatefulSet")," and is connected to a ",(0,o.kt)("em",{parentName:"p"},"PostgreSQL")," database.  "),(0,o.kt)("p",null,"The Kubernetes objects of the workload are as follows:  "),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"/img/usecases_oauth2-demo-k8s1.png",alt:"Kubernetes object relation"})),(0,o.kt)("p",null,"In this picture you can find two ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/ingress/"},(0,o.kt)("em",{parentName:"a"},"Ingresses")),"\ndefinitions: one is serving the application ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/workloads/controllers/deployment/"},(0,o.kt)("em",{parentName:"a"},"Deployment"))," ",(0,o.kt)("em",{parentName:"p"},"oauth2-demo"),"\nwhich schedules one ",(0,o.kt)("em",{parentName:"p"},"Pod")," under ",(0,o.kt)("a",{parentName:"p",href:"http://oauth2-demo.127.0.0.1.nip.io:8080"},"oauth2-demo.127.0.0.1.nip.io:8080"),", the other is\nserving Keycloak under ",(0,o.kt)("a",{parentName:"p",href:"http://keycloak.127.0.0.1.nip.io:8080"},"keycloak.127.0.0.1.nip.io:8080"),".    "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Important:")," Please mind that port ",(0,o.kt)("em",{parentName:"p"},"8080")," is a port mapping. From within the cluster you will see it running on port ",(0,o.kt)("em",{parentName:"p"},"80"),".  "),(0,o.kt)("p",null,"You can introspect the Ingress also with ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$> kubectl --namespace oauth2-demo get ingress \nNAME                             CLASS    HOSTS                          ADDRESS      PORTS     AGE\nkeycloak                         <none>   keycloak.127.0.0.1.nip.io      172.23.0.2   80, 443   56m\nkeycloak-console                 <none>   keycloak.127.0.0.1.nip.io      172.23.0.2   80, 443   56m\noauth2-demo                      <none>   oauth2-demo.127.0.0.1.nip.io   172.23.0.2   80        56m\ndashboard-kubernetes-dashboard   <none>   dashboard.127.0.0.1.nip.io     172.23.0.2   80        56m\n")),(0,o.kt)("p",null,"The next layer adds the Kubernetes ",(0,o.kt)("a",{parentName:"p",href:"https://kubernetes.io/docs/concepts/services-networking/service/"},(0,o.kt)("em",{parentName:"a"},"Service"))," objects which are\nrequired to access a Pod."),(0,o.kt)("p",null,"You can introspect the Services also with ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$> kubectl --namespace oauth2-demo get service \nNAME                             TYPE        CLUSTER-IP      EXTERNAL-IP   PORT(S)                    AGE\nkeycloak-http                    ClusterIP   10.43.40.200    <none>        80/TCP,8443/TCP,9990/TCP   62m\nkeycloak-headless                ClusterIP   None            <none>        80/TCP                     62m\nkeycloak-postgresql              ClusterIP   10.43.231.210   <none>        5432/TCP                   62m\nkeycloak-postgresql-headless     ClusterIP   None            <none>        5432/TCP                   62m\noauth2-demo                      ClusterIP   10.43.160.68    <none>        8080/TCP                   62m\ndashboard-kubernetes-dashboard   ClusterIP   10.43.159.219   <none>        61348/TCP                  62m\n")),(0,o.kt)("p",null,"Please ignore the other services as they are not important for this example.",(0,o.kt)("br",{parentName:"p"}),"\n","Finally, please also check out the Pods in the cluster's namespace with ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl"),". It should be similar to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$> kubectl --namespace oauth2-demo get pod\nNAME                                              READY   STATUS    RESTARTS   AGE\noauth2-demo-675f5c55b5-xxj57                      2/2     Running   0          63m\ndashboard-kubernetes-dashboard-65dbdd8978-gd9jt   1/1     Running   0          63m\nkeycloak-postgresql-0                             1/1     Running   0          63m\nkeycloak-0                                        1/1     Running   0          63m\n")),(0,o.kt)("h3",{id:"the-oauth2-demo-sidecar-workload"},"The OAuth2-Demo Sidecar Workload"),(0,o.kt)("p",null,"If you want to know more about the implementation of the sidecar pattern in this example please head over to the\n",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gefyrahq/gefyra-demos/blob/main/oauth2-demo/oauth2-demo.yaml#L37"},"workload manifest"),".\nThe important part is that the Pod template specifies two containers. The first is ",(0,o.kt)("em",{parentName:"p"},"name: oauth2-proxy")," and the second is\n",(0,o.kt)("em",{parentName:"p"},"name: oauth2-demo-app"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'[...]\ncontainers:\n- name: oauth2-proxy\n  image: quay.io/oauth2-proxy/oauth2-proxy:v7.2.1\n  imagePullPolicy: IfNotPresent\n  [...]\n  ports:\n    - containerPort: 8809\n      protocol: TCP\n      name: http\n  envFrom:\n    - configMapRef:\n        name: oauth2-oauth2proxy\n- name: oauth2-demo-app\n  [...]\n  image: "quay.io/gefyra/oauth2-demo:latest"\n  imagePullPolicy: Always\n  ports:\n    - name: http-intern\n      containerPort: 8155\n      protocol: TCP\n[...]\n')),(0,o.kt)("p",null,"Please have a closer look at the port configuration. The oauth2-proxy runs on port ",(0,o.kt)("em",{parentName:"p"},"8809")," (with name ",(0,o.kt)("em",{parentName:"p"},"http"),") and oauth2-demo-app\nruns on port ",(0,o.kt)("em",{parentName:"p"},"8155"),". You can describe the associated service with ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," to see which of both ports the traffic is pointed to:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$> kubectl -n oauth2-demo describe service oauth2-demo\nName:              oauth2-demo\nNamespace:         oauth2-demo\nLabels:            app.kubernetes.io/instance=gefyra-demos\n                   app.kubernetes.io/name=oauth2-demo\nAnnotations:       <none>\nSelector:          app.kubernetes.io/instance=gefyra-demos,app.kubernetes.io/name=oauth2-demo\nType:              ClusterIP\nIP Families:       <none>\nIP:                10.43.160.68\nIPs:               10.43.160.68\nPort:              http  8080/TCP\nTargetPort:        http/TCP\nEndpoints:         10.42.1.4:8809\nSession Affinity:  None\nEvents:            <none>\n")),(0,o.kt)("p",null,"For the sidecar pattern to function, the service speaks to the target Pod on port ",(0,o.kt)("em",{parentName:"p"},"8809")," which is served by the oauth2-proxy.\nA closer review of oauth2-proxy's configuration reveals to which address the proxy upstreams all requests:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'[...]\nOAUTH2_PROXY_UPSTREAMS: "http://127.0.0.1:8155"\n[...]\n')),(0,o.kt)("p",null,"This is precisely the connection to the backend application ",(0,o.kt)("strong",{parentName:"p"},"in each Pod"),".  "),(0,o.kt)("h3",{id:"the-openid-connect-flow-in-brief"},"The OpenID Connect Flow in Brief"),(0,o.kt)("p",null,"The following image depicts the OpenID Connect flow in brief how it is working in this example:"),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"/img/usecases_oauth2-demo-oidc.png",alt:"the OIDC flow in brief"})),(0,o.kt)("p",null,"As you can see, the OAuth2-Proxy only passes authenticated traffic to the backend application. That breaks\nthe application free from (potentially unsafe) custom OIDC code and authorization handling. ",(0,o.kt)("strong",{parentName:"p"},"This is standard procedure\nand should not be part of your code"),". Make use of this pattern when having this requirement.  "),(0,o.kt)("p",null,"Ok! Enough for the workload internals. Let's check out how Gefyra helps out with fixing nasty bugs."),(0,o.kt)("h2",{id:"the-example-bug"},"The Example Bug"),(0,o.kt)("p",null,"If you hit the troublesome route ",(0,o.kt)("a",{parentName:"p",href:"http://oauth2-demo.127.0.0.1.nip.io:8080/items/123"},"http://oauth2-demo.127.0.0.1.nip.io:8080/items/123"),"\n(with ",(0,o.kt)("em",{parentName:"p"},"123")," as an example for any int value) you will face the ",(0,o.kt)("inlineCode",{parentName:"p"},"Internal Server Error")," message. That is a ",(0,o.kt)("em",{parentName:"p"},"HTTP 500")," status.\nThe code being executed can be found\nhere: ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gefyrahq/gefyra-demos/blob/main/oauth2-demo/app/main.py#L23"},"https://github.com/gefyrahq/gefyra-demos/blob/main/oauth2-demo/app/main.py#L23")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'@app.get("/items/{item_id}")\nasync def get_item(item_id: int, x_forwarded_access_token: Optional[str] = Header(None)):\n    if x_forwarded_access_token:\n        data = jwt.decode(x_forwarded_access_token, options={"verify_signature": False})\n        mail = data["Email"]\n        return {"item_id": item_id, "Email": mail}\n    else:\n        return {"item_id": item_id, "Email": "not given"}\n')),(0,o.kt)("p",null,"Of course, you are a very attentive reader and found the mistake immediately, but let's move on for the sake of this example."),(0,o.kt)("h2",{id:"gefyra-to-the-rescue"},"Gefyra to the Rescue"),(0,o.kt)("p",null,"As always, the first would be to spin up Gefyra with\n",(0,o.kt)("inlineCode",{parentName:"p"},"gefyra up"),". Please be sure to still have the development cluster active in your current ",(0,o.kt)("inlineCode",{parentName:"p"},"kubectl")," context."),(0,o.kt)("h3",{id:"running-a-development-instance-of-the-container"},"Running a Development Instance of the Container"),(0,o.kt)("p",null,"In order to inspect the application and pinpoint the bug, it requires a local instance of the container. Ideally with a\ndebug server running. Since you need the sidecar in place (for the OIDC logic), the development instance must be placed\nin a Pod with the sidecar pattern. Gefyra offers you a unique mechanism to achieve exactly that.\nStart the development instance like so (set ",(0,o.kt)("inlineCode",{parentName:"p"},"LOCAL_DIR")," to the directory where you've copied/cloned ",(0,o.kt)("inlineCode",{parentName:"p"},"gefyra-demos")," to):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$> export LOCAL_DIR=/home/<...>/gefyra-demos/oauth2-demo/app\n$> gefyra run -i quay.io/gefyra/oauth2-demo -N myfastapi-demo \\\n    -n oauth2-demo -v $LOCAL_DIR:/app \\\n    -c \"bash -c 'python -m debugpy --wait-for-client --listen 0.0.0.0:5678 -m uvicorn main:app --host 0.0.0.0 --port 8155 --reload'\"\n")),(0,o.kt)("p",null,"No worries, the following explains the parameter list:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"-i quay.io/gefyra/oauth2-demo"),": run the Docker image which is also running in the cluster"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"-N myfastapi-demo"),": name this local Docker instance ",(0,o.kt)("em",{parentName:"li"},"myfastapi-demo")," for further reference"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"-n oauth2-demo"),": place this Docker instance in the Kubernetes namespace ",(0,o.kt)("em",{parentName:"li"},"oauth2-demo")," (where this example plays)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"-v /home/<...>/gefyra-demos/oauth2-demo/app:/app"),": mount the source code on your disk to this Docker instance at ",(0,o.kt)("em",{parentName:"li"},"/app")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},'-c "CMD"'),": start this Docker instance with ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/microsoft/debugpy"},(0,o.kt)("em",{parentName:"a"},"debugpy")),", the rest is like from the Kubernetes workload manifest of the application")),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://github.com/microsoft/debugpy"},"debugpy")," is an implementation of the ",(0,o.kt)("em",{parentName:"p"},"Debug Adapter Protocol")," for Python. This protocol\nis also available for a countless number of programming languages. It basically spins up a server, in this case waiting for\na debugger client to connect, and runs the application wrapped in with debugging capabilities."),(0,o.kt)("h3",{id:"attaching-a-debugger-to-the-development-instance"},"Attaching a Debugger to the Development Instance"),(0,o.kt)("p",null,"Now that you are running a development instance with this Docker image locally, you need to connect the debugger client.\nThis example is prepared with ",(0,o.kt)("em",{parentName:"p"},"VSCode")," and the Python extension installed.",(0,o.kt)("br",{parentName:"p"}),"\n","In order to do that, you need to find out the local IP address Gefyra assigned to your container with:\n{% raw %}"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$> docker inspect -f '{{range.NetworkSettings.Networks}}{{.IPAddress}}{{end}}' myfastapi-demo\n")),(0,o.kt)("p",null,"{% endraw %}\nThis will be part of the CLI soon (or maybe it already is). The command shown tells the IP of the container which is\nneeded for VSCode.  "),(0,o.kt)("p",null,"Please get the code for the backend application from ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/gefyrahq/gefyra-demos/tree/main/oauth2-demo/app"},"the repository")," and\nopen up VSCode.  "),(0,o.kt)("p",null,"Select the ",(0,o.kt)("em",{parentName:"p"},"Remote Attach")," option to connect to the running debugpy instance at the given IP. The port is ",(0,o.kt)("em",{parentName:"p"},"5678")," (please review the command above)."),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"/img/usecases_oauth2-demo_vscode1.png",alt:"starting the VSCode remote debugger"})),(0,o.kt)("p",null,"In the ",(0,o.kt)("em",{parentName:"p"},"DEBUG CONSOLE")," it will display the following output: "),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"INFO:     Will watch for changes in these directories: ['/app']\nINFO:     Uvicorn running on http://0.0.0.0:8155 (Press CTRL+C to quit)\nINFO:     Started reloader process [438166] using watchgod\n")),(0,o.kt)("p",null,"Awesome. You have a debugger connected to the development instance. Now it's time to receive a request from the oauth2-proxy container."),(0,o.kt)("h3",{id:"bridging-the-development-instance-in-the-cluster"},"Bridging the Development Instance in the Cluster"),(0,o.kt)("p",null,"In order to receive requests (i.e. traffic) from within the cluster, basically when you hit the route ",(0,o.kt)("a",{parentName:"p",href:"http://oauth2-demo.127.0.0.1.nip.io:8080/items/123"},"http://oauth2-demo.127.0.0.1.nip.io:8080/items/123"),"\nin your browser, a ",(0,o.kt)("inlineCode",{parentName:"p"},"gefyra bridge ...")," is needed.",(0,o.kt)("br",{parentName:"p"}),"\n","Just create a bridge with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$> gefyra bridge -N myfastapi-demo -n oauth2-demo \\\n      --target deploy/oauth2-demo/oauth2-demo-app \\\n      --port 8155:8155 \n[INFO] Creating bridge for Pod oauth2-demo-675f5c55b5-xxj57\n[INFO] Waiting for the bridge(s) to become active\n[INFO] Bridge myfastapi established\n")),(0,o.kt)("p",null,"The parameter list specifies the following:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"-N myfastapi-demo"),": the bridge targets (on one end) the local Docker instance with the name ",(0,o.kt)("em",{parentName:"li"},"myfastapi-demo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"-n oauth2-demo"),": the target workload (the other end of the bridge) is in the Kubernetes namespace ",(0,o.kt)("em",{parentName:"li"},"oauth2-demo")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"-","-","deployment oauth2-demo"),": Gefyra intercepts all Pods of the Deployment ",(0,o.kt)("em",{parentName:"li"},"oauth2-demo")," (don't confuse it with the name of the namespace)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"-","-","port 8155:8155"),": the bridge to map port 8155 of the container in the cluster to 8155 on the local instance"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("em",{parentName:"li"},"-","-","container-name oauth2-demo-app"),": since this Pod contains multiple containers (see the sidecar pattern above), Gefyra is asked to intercept the application container ",(0,o.kt)("em",{parentName:"li"},"oauth2-demo-app"))),(0,o.kt)("h3",{id:"debugging-the-application"},"Debugging the Application"),(0,o.kt)("p",null,"Now you are ready to stop the execution of the code in your VSCode debugger.\nPlace the breakpoint anywhere near the position you would expect the error to happen:"),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"/img/usecases_oauth2-demo_vscode2.png",alt:"breakpoint in VSCode"})),(0,o.kt)("p",null,"Point your browser to ",(0,o.kt)("a",{parentName:"p",href:"http://oauth2-demo.127.0.0.1.nip.io:8080/items/123"},"http://oauth2-demo.127.0.0.1.nip.io:8080/items/123")," again."),(0,o.kt)("p",null,"Once you hit the breakpoint, you can easily look around and introspect the JWT (json web token) issued from Keycloak and\nverified with OAuth2-Proxy."),(0,o.kt)("div",{align:"center"},(0,o.kt)("img",{src:"/img/usecases_oauth2-demo_vscode3.png",alt:"introspecting variables and the JWT token"})),(0,o.kt)("p",null,'As you may see, the key in the token is written in a lowercase "email". This is causing the ',(0,o.kt)("em",{parentName:"p"},"KeyError: 'Email'")," resulting\nin a 500 error.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Remark:")," Of course you could have found this out reading the logs, but where is the fun? Anyway, debugging software is\na tool for hunting down causes of way more complex misbehaving then in this example."),(0,o.kt)("h3",{id:"fixing-the-bug"},"Fixing the Bug"),(0,o.kt)("p",null,"Since the development instance is started with your local source code mounted into the container and the ",(0,o.kt)("em",{parentName:"p"},"-","-","reload")," flag turned on,\nplease move on and fix this bug. The fix looks like this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},'[...]\n        data = jwt.decode(x_forwarded_access_token, options={"verify_signature": False})\n        mail = data["email"]  # the key is with a lowercase \'email\'\n        return {"item_id": item_id, "Email": mail}\n[...]\n')),(0,o.kt)("p",null,"Once you have saved the changes, the application is immediately restarted with the fixed code.",(0,o.kt)("br",{parentName:"p"}),"\n","The output of the route ",(0,o.kt)("a",{parentName:"p",href:"http://oauth2-demo.127.0.0.1.nip.io:8080/items/123"},"http://oauth2-demo.127.0.0.1.nip.io:8080/items/123")," is\nnow in the browser:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{"item_id":123,"Email":"john@gefyra.dev"}\n')),(0,o.kt)("p",null,"Awesome! Commit and push.  "),(0,o.kt)("p",null,"This way you can be quite sure that this will work in all Kubernetes environments provisioned with these workloads.  "),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Remark:")," Gefyra is able to run and bridge as many applications as you need. This is useful in complex request/response\nscenarios with multiple involved services - and potentially all with a debugger attached. Isn't that neat?"),(0,o.kt)("h3",{id:"shutting-down-gefyra"},"Shutting Down Gefyra"),(0,o.kt)("p",null,"In order to clean everything up, you can run ",(0,o.kt)("inlineCode",{parentName:"p"},"gefyra down"),". This will remove the running bridges and shut down the development\ncontainer instances. You will now find the cluster reset to the state with the original bug around. For the fix to become persistent\nyou will need to roll out a new version of the container image specified in the Kubernetes workload manifest."),(0,o.kt)("h1",{id:"remove-the-development-infrastructure"},"Remove the Development Infrastructure"),(0,o.kt)("p",null,"If you have initially created the development infrastructure using ",(0,o.kt)("inlineCode",{parentName:"p"},"Getdeck")," you can now run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$> deck remove --cluster https://github.com/gefyrahq/gefyra-demos.git\n[INFO] Deleting the k3d cluster with name gefyra-demos\n")),(0,o.kt)("p",null,"If you created the infrastructure yourself, you probably already know how to get rid of everything yourself ;-)"),(0,o.kt)("h1",{id:"additional-notes"},"Additional Notes"),(0,o.kt)("p",null,"If you want maximum convenience for your developers and a supported team oriented workflow, we recommend you\ncheck out ",(0,o.kt)("a",{parentName:"p",href:"https://unikube.io"},"Unikube"),".\nGefyra is part of Unikube's development workflow."),(0,o.kt)("p",null,"If you are developing django applications, be sure to check out ",(0,o.kt)("a",{parentName:"p",href:"https://django-hurricane.io/"},"Django-Hurricane"),", a Kubernetes-native\nstack specifically created for django and ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/Blueshoe/pycloak"},"Pycloak"),", a package that's makes it super easy to integrate\nOpenID Connect/OAuth2 workflows in django."))}c.isMDXComponent=!0}}]);